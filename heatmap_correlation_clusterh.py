# -*- coding: utf-8 -*-
"""HeatMap_correlation_ClusterH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FhZB5UOuX6ogPV-FE0cuJsm6eke2450g
"""

import pandas as pd
import seaborn as sn
import scipy.cluster.hierarchy as spc
import matplotlib.pyplot as plt
import scipy
import numpy as np

#gmm sklearn

df = pd.read_csv (r'/content/Laser6h_NaoNorm.csv')
df.dropna(how='all', axis=1, inplace=True)
df.columns.values[0] = 'Groups'

df.head()

import pandas as pd
import seaborn as sn
import scipy.cluster.hierarchy as spc
import matplotlib.pyplot as plt
import scipy
import numpy as np

select_group = df.loc[df['Groups'] == 'CS']
#print (select_group)
select_group.head(6)

corr = df.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='complete', metric = 'euclidian')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')
corrMatrix = select_group.corr()
sn.heatmap(corrMatrix, annot=True)
plt.show()

def cluster_corr(corr_array, inplace=False):
    """
    Rearranges the correlation matrix, corr_array, so that groups of highly
    correlated variables are next to eachother

    Parameters
    ----------
    corr_array : pandas.DataFrame or numpy.ndarray
        a NxN correlation matrix

    Returns
    -------
    pandas.DataFrame or numpy.ndarray
        a NxN correlation matrix with the columns and rows rearranged
    """
    pairwise_distances = spc.distance.pdist(corr_array)
    linkage = spc.linkage(pairwise_distances, method='complete')
    cluster_distance_threshold = pairwise_distances.max()/2
    idx_to_cluster_array = spc.fcluster(linkage, cluster_distance_threshold,
                                        criterion='distance')
    idx = np.argsort(idx_to_cluster_array)

    if not inplace:
        corr_array = corr_array.copy()

    if isinstance(corr_array, pd.DataFrame):
        return corr_array.iloc[idx, :].T.iloc[idx, :]
    return corr_array[idx, :][:, idx]

plt.figure()
sn.heatmap(cluster_corr(select_group.corr()), cmap="vlag")

#sn.heatmap(np.round(corr,2), cmap='vlag', annot=True, annot_kws={"size": 7}, vmin=-1, vmax=1);

plt.figure()
sn.clustermap(cluster_corr(select_group.corr()), cmap="vlag", vmin=-1, vmax=1, figsize=(12,9))

from google.colab import files
plt.savefig("Correlation6h_CS_relatorio.png")
files.download("Correlation6h_CS_relatorio.png")

AS = df.loc[df['Groups'] == 'AS']
#print (select_group)
#AS.head(6)

corr = AS.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='complete')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')

plt.figure()
sn.heatmap(cluster_corr(AS.corr()), cmap="vlag", vmin =-1, vmax = 1)

#sn.heatmap(np.round(corr,2), cmap='vlag', annot=True, annot_kws={"size": 7}, vmin=-1, vmax=1);

plt.figure()
sn.clustermap(cluster_corr(AS.corr()), cmap="vlag", vmin=-1, vmax=1, figsize=(12,9))

from google.colab import files
plt.savefig("Correlation6h_AS_note.png")
files.download("Correlation6h_AS_note.png")

AL = df.loc[df['Groups'] == 'AL']
#print (select_group)
#AL.head(6)

corr = AL.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='complete')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')

plt.figure()
sn.heatmap(cluster_corr(AL.corr()), cmap="vlag")

#sn.heatmap(np.round(corr,2), cmap='vlag', annot=True, annot_kws={"size": 7}, vmin=-1, vmax=1);

plt.figure()
sn.clustermap(cluster_corr(AL.corr()), cmap="vlag",
             vmin=-1, vmax=1, figsize=(12,9))

from google.colab import files
plt.savefig("Correlation6h_AL_note.png")
files.download("Correlation6h_AL_note.png")

df = pd.read_csv (r'/content/Laser24h.csv')
df.head()

corr = df.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='average')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')

corrMatrix = df.corr()
sn.heatmap(corrMatrix, annot=True)
plt.show()

print (corr)

df.head()

from scipy import stats
CS24 = df.loc[df['Groups'] == 'CS']
#print (select_group)
#AS.head(6)

corr = CS24.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='complete')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance' )
plt.figure()
sn.heatmap(cluster_corr(CS24.corr()), cmap="vlag", vmin = -1, vmax=1)

plt.figure()
sn.clustermap(cluster_corr(CS24.corr()), cmap="vlag", annot=False,
              vmin=-1, vmax=1, figsize=(12,9))

from google.colab import files
plt.savefig("Correlation24h_CS_note.png")
files.download("Correlation24h_CS_note.png")

AS24 = df.loc[df['Groups'] == 'AS']
##print (select_group)
##AS.head(6)

#corr = AS24.corr().values

#pdist = spc.distance.pdist(corr)
#linkage = spc.linkage(pdist, method='average')
#idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')
df.head()

corr = df.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='average')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')

corrMatrix = df.corr()
sn.heatmap(corrMatrix, annot=True)
plt.show()

plt.figure()
sn.clustermap(cluster_corr(AS24.corr()), cmap="vlag", annot=False,
               vmin=-1, vmax=1, figsize=(12,9))

from google.colab import files
plt.savefig("Correlation24h_AS_note.png")
files.download("Correlation24h_AS_note.png")

AL24 = df.loc[df['Groups'] == 'AL']
#print (select_group)
#AS.head(6)

corr = AL24.corr().values

pdist = spc.distance.pdist(corr)
linkage = spc.linkage(pdist, method='centroid')
idx = spc.fcluster(linkage, 0.5 * pdist.max(), 'distance')

plt.figure()
sn.clustermap(cluster_corr(AL24.corr()), cmap="vlag",
               vmin=-1, vmax=1, figsize=(12,9))

from google.colab import files
plt.savefig("Correlation24h_AL_note.png")
files.download("Correlation24h_AL_note.png")